name: Test suite
on:
  workflow_call:
    inputs:
      asan_ubuntu_version:
        required: true
        type: string
      branch:
        required: true
        type: string
      community_verify_type_inference:
        required: true
        type: boolean
      libmysqlclient_with_mysqli:
        required: true
        type: boolean
      run_alpine:
        required: true
        type: boolean
      run_linux_ppc64:
        required: true
        type: boolean
      run_macos_arm64:
        required: true
        type: boolean
      ubuntu_version:
        required: true
        type: string
      windows_version:
        required: true
        type: string
      skip_laravel:
        required: true
        type: boolean
      skip_symfony:
        required: true
        type: boolean
      skip_wordpress:
        required: true
        type: boolean
permissions:
  contents: read
jobs:
  COMMUNITY:
    strategy:
      fail-fast: false
      matrix:
        type: ['asan', 'verify_type_inference']
        arch: ["${{ inputs.ubuntu_version }}", "${{ inputs.ubuntu_version }}-arm"] 
        exclude:
          - type: ${{ !inputs.community_verify_type_inference && 'verify_type_inference' || '*never*' }}
    name: "COMMUNITY_${{ matrix.type }}"
    runs-on: "ubuntu-${{ matrix.arch }}"
    env:
      ASAN_OPTIONS: exitcode=139
      UBSAN_OPTIONS: print_stacktrace=1
      USE_ZEND_ALLOC: 0
      USE_TRACKED_ALLOC: 1
    steps:
      - name: git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
      - name: apt
        uses: ./.github/actions/apt-x64
      - name: ./configure
        uses: ./.github/actions/configure-x64
        with:
          # CFLAGS removes O2, so we have to add it again...
          configurationParameters: >-
            --enable-zts
            ${{ matrix.type == 'asan' && '--enable-debug CFLAGS="-fsanitize=undefined,address -fno-sanitize-recover -DZEND_TRACK_ARENA_ALLOC" LDFLAGS="-fsanitize=undefined,address"' || '' }}
            ${{ matrix.type == 'verify_type_inference' && 'CFLAGS="-DZEND_VERIFY_TYPE_INFERENCE -O2"' || '' }}
      - name: make
        run: make -j$(/usr/bin/nproc) >/dev/null
      - name: make install
        uses: ./.github/actions/install-linux
      - name: Setup
        run: |
          sudo service mysql start
          mysql -uroot -proot -e "CREATE DATABASE IF NOT EXISTS test"
          mysql -uroot -proot -e "SET GLOBAL local_infile = true"
      - name: Enable Opcache
        run: |
          echo memory_limit=-1 >> /etc/php.d/opcache.ini
          echo zend_extension=opcache.so > /etc/php.d/opcache.ini
          echo opcache.enable_cli=1 >> /etc/php.d/opcache.ini
          echo opcache.enable=1 >> /etc/php.d/opcache.ini
          echo opcache.protect_memory=1 >> /etc/php.d/opcache.ini
          echo opcache.memory_consumption=256M >> /etc/php.d/opcache.ini
          echo opcache.file_update_protection=0 >> /etc/php.d/opcache.ini
          echo opcache.interned_strings_buffer=64 >> /etc/php.d/opcache.ini
          echo opcache.max_accelerated_files=100000 >> /etc/php.d/opcache.ini
      - name: Enable JIT
        if: matrix.type != 'verify_type_inference'
        run: |
          echo opcache.jit=tracing >> /etc/php.d/opcache.ini
          echo opcache.jit_buffer_size=1G >> /etc/php.d/opcache.ini
          echo opcache.jit_prof_threshold=0.000000001 >> /etc/php.d/opcache.ini
          echo opcache.jit_max_root_traces=100000 >> /etc/php.d/opcache.ini
          echo opcache.jit_max_side_traces=100000 >> /etc/php.d/opcache.ini
          echo opcache.jit_max_exit_counters=100000 >> /etc/php.d/opcache.ini
          echo opcache.jit_blacklist_root_trace=255 >> /etc/php.d/opcache.ini
          echo opcache.jit_blacklist_side_trace=255 >> /etc/php.d/opcache.ini
          echo opcache.jit_hot_loop=1 >> /etc/php.d/opcache.ini
          echo opcache.jit_hot_func=1 >> /etc/php.d/opcache.ini
          echo opcache.jit_hot_return=1 >> /etc/php.d/opcache.ini
          echo opcache.jit_hot_side_exit=1 >> /etc/php.d/opcache.ini
          php -v

      - name: Test multiple libraries and frameworks in parallel
        run: |
          sudo prlimit --pid $$ --nofile=1048576:1048576
          
          php $GITHUB_WORKSPACE/.github/nightly.php || exit $?

      - name: Test PHPSeclib
        if: always()
        run: |
          git clone https://github.com/phpseclib/phpseclib --branch=master
          cd phpseclib
          export ASAN_OPTIONS=exitcode=139
          export PHPSECLIB_ALLOW_JIT=1
          php /usr/bin/composer install --no-progress --ignore-platform-reqs
          php $GITHUB_WORKSPACE/.github/jit_check.php vendor/bin/paratest --verbose --configuration=tests/phpunit.xml --runner=WrapperRunner || exit $?

      - name: 'Symfony Preloading'
        if: ${{ !cancelled() && !inputs.skip_symfony }}
        run: |
          php /usr/bin/composer create-project symfony/symfony-demo symfony_demo --no-progress --ignore-platform-req=php+
          cd symfony_demo
          git rev-parse HEAD
          sed -i 's/PHP_SAPI/"cli-server"/g' var/cache/dev/App_KernelDevDebugContainer.preload.php
          php -d opcache.preload=var/cache/dev/App_KernelDevDebugContainer.preload.php public/index.php
      - name: Notify Slack
        if: failure()
        uses: ./.github/actions/notify-slack
        with:
          token: ${{ secrets.ACTION_MONITORING_SLACK }}
