name: Nightly
on:
  schedule:
   - cron: "0 1 * * *"
  workflow_dispatch: ~
jobs:
  GENERATE_MATRIX:
    name: Generate Matrix
    if: github.repository_owner == 'php' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.set-matrix.outputs.branches }}
      matrix-include: ${{ steps.set-matrix.outputs.matrix-include }}
      windows-matrix-include: ${{ steps.set-matrix.outputs.windows-matrix-include }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Set fetch-depth to 0 to clone the full repository
          # including all branches. This is required to find
          # the correct commit hashes.
          fetch-depth: 0
      - name: Grab the commit mapping
        uses: actions/cache@v3
        with:
          path: branch-commit-cache.json
          # The cache key needs to change every time for the
          # cache to be updated after this job finishes.
          key: nightly-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            nightly-
      - name: Generate Matrix
        id: set-matrix
        run: php .github/nightly_matrix.php "${{ github.event_name }}" "${{ github.run_attempt }}"
      - name: Notify Slack
        if: failure()
        uses: ./.github/actions/notify-slack
        with:
          token: ${{ secrets.ACTION_MONITORING_SLACK }}
  LINUX_X64:
    needs: GENERATE_MATRIX
    if: ${{ needs.GENERATE_MATRIX.outputs.branches != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.GENERATE_MATRIX.outputs.branches) }}
        configuration_parameters: ['']
        debug: [true, false]
        name: ['']
        run_tests_parameters: ['']
        test_function_jit: [true]
        zts: [true, false]
        include: ${{ fromJson(needs.GENERATE_MATRIX.outputs.matrix-include) }}
    name: "${{ matrix.branch.name }}_LINUX_X64${{ matrix.name }}_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }}"
    runs-on: ubuntu-20.04
    steps:
      - name: git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch.ref }}
      - name: Create MSSQL container
        uses: ./.github/actions/setup-mssql
      - name: Create Oracle container
        uses: ./.github/actions/setup-oracle
      - name: apt
        uses: ./.github/actions/apt-x64
      - name: ./configure
        uses: ./.github/actions/configure-x64
        with:
          configurationParameters: >-
            ${{ matrix.configuration_parameters }}
            --${{ matrix.debug && 'enable' || 'disable' }}-debug
            --${{ matrix.zts && 'enable' || 'disable' }}-zts
      - name: make
        run: make -j$(/usr/bin/nproc) >/dev/null
      - name: make install
        uses: ./.github/actions/install-linux
      - name: Setup
        uses: ./.github/actions/setup-x64
      - name: Test
        uses: ./.github/actions/test-linux
        with:
          testArtifacts: ${{ matrix.branch.name }}_${{ matrix.name }}_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }}
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
          idleCpu: ${{ matrix.asan && 'true' || 'false' }}
      - name: Test Tracing JIT
        uses: ./.github/actions/test-linux
        with:
          testArtifacts: ${{ matrix.branch.name }}_${{ matrix.name }}_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }} Tracing JIT
          jitType: tracing
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
      - name: Test OpCache
        uses: ./.github/actions/test-linux
        with:
          testArtifacts: ${{ matrix.branch.name }}_${{ matrix.name }}_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }} OpCache
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
      - name: Test Function JIT
        # ASAN frequently timeouts. Each test run takes ~90 minutes, we can
        # avoid running into the 6 hour timeout by skipping the function JIT.
        if: matrix.test_function_jit
        uses: ./.github/actions/test-linux
        with:
          testArtifacts: ${{ matrix.branch.name }}_${{ matrix.name }}_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }} Function JIT
          jitType: function
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
      - name: Verify generated files are up to date
        uses: ./.github/actions/verify-generated-files
      - name: Notify Slack
        if: failure()
        uses: ./.github/actions/notify-slack
        with:
          token: ${{ secrets.ACTION_MONITORING_SLACK }}
  LINUX_X32:
    needs: GENERATE_MATRIX
    if: ${{ needs.GENERATE_MATRIX.outputs.branches != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.GENERATE_MATRIX.outputs.branches) }}
        debug: [true, false]
        zts: [true, false]
    name: "${{ matrix.branch.name }}_LINUX_X32_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }}"
    runs-on: ubuntu-latest
    container:
      image: ubuntu:20.04
    env:
      MYSQL_TEST_HOST: mysql
      PDO_MYSQL_TEST_DSN: mysql:host=mysql;dbname=test
      PDO_MYSQL_TEST_HOST: mysql
    services:
      mysql:
        image: mysql:8
        ports:
          - 3306:3306
        env:
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: root
    steps:
      - name: git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch.ref }}
      - name: apt
        uses: ./.github/actions/apt-x32
      - name: ./configure
        uses: ./.github/actions/configure-x32
        with:
          configurationParameters: >-
            --${{ matrix.debug && 'enable' || 'disable' }}-debug
            --${{ matrix.zts && 'enable' || 'disable' }}-zts
      - name: make
        run: make -j$(/usr/bin/nproc) >/dev/null
      - name: make install
        uses: ./.github/actions/install-linux-x32
      - name: Test
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
      - name: Test Tracing JIT
        uses: ./.github/actions/test-linux
        with:
          jitType: tracing
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
      - name: Test OpCache
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
      - name: Test Function JIT
        uses: ./.github/actions/test-linux
        with:
          jitType: function
          runTestsParameters: >-
            ${{ matrix.run_tests_parameters }}
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
      - name: Notify Slack
        if: failure()
        uses: ./.github/actions/notify-slack
        with:
          token: ${{ secrets.ACTION_MONITORING_SLACK }}
  MACOS:
    needs: GENERATE_MATRIX
    if: ${{ needs.GENERATE_MATRIX.outputs.branches != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.GENERATE_MATRIX.outputs.branches) }}
        debug: [true, false]
        zts: [true, false]
    name: "${{ matrix.branch.name }}_MACOS_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }}"
    runs-on: macos-12
    steps:
      - name: git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch.ref }}
      - name: brew
        uses: ./.github/actions/brew
      - name: ./configure
        uses: ./.github/actions/configure-macos
        with:
          configurationParameters: >-
            --${{ matrix.debug && 'enable' || 'disable' }}-debug
            --${{ matrix.zts && 'enable' || 'disable' }}-zts
      - name: make
        run: |-
          export PATH="/usr/local/opt/bison/bin:$PATH"
          make -j$(sysctl -n hw.logicalcpu) >/dev/null
      - name: make install
        run: sudo make install
      - name: Test
        uses: ./.github/actions/test-macos
        with:
          testArtifacts: ${{ matrix.branch.name }}_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }}
      - name: Test Tracing JIT
        uses: ./.github/actions/test-macos
        with:
          testArtifacts: ${{ matrix.branch.name }}_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }} Tracing JIT
          jitType: tracing
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            -d opcache.protect_memory=1
      - name: Test OpCache
        uses: ./.github/actions/test-macos
        with:
          testArtifacts: ${{ matrix.branch.name }}_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }} OpCache
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            -d opcache.protect_memory=1
      - name: Test Function JIT
        uses: ./.github/actions/test-macos
        with:
          testArtifacts: ${{ matrix.branch.name }}_${{ matrix.debug && 'DEBUG' || 'RELEASE' }}_${{ matrix.zts && 'ZTS' || 'NTS' }} Function JIT
          jitType: function
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            -d opcache.protect_memory=1
      - name: Verify generated files are up to date
        uses: ./.github/actions/verify-generated-files
      - name: Notify Slack
        if: failure()
        uses: ./.github/actions/notify-slack
        with:
          token: ${{ secrets.ACTION_MONITORING_SLACK }}
  COVERAGE_DEBUG_NTS:
    if: github.repository_owner == 'php' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-20.04
    steps:
      - name: git checkout
        uses: actions/checkout@v4
      - name: Create MSSQL container
        uses: ./.github/actions/setup-mssql
      - name: Create Oracle container
        uses: ./.github/actions/setup-oracle
      - name: apt
        uses: ./.github/actions/apt-x64
      - name: Install gcovr
        run: sudo -H pip install gcovr
      - name: ./configure
        uses: ./.github/actions/configure-x64
        with:
          configurationParameters: --enable-debug --disable-zts --enable-gcov
      - name: make
        run: make -j$(/usr/bin/nproc) >/dev/null
      - name: make install
        uses: ./.github/actions/install-linux
      - name: Setup
        uses: ./.github/actions/setup-x64
      # We only test with OpCache, the difference in coverage is negligible
      - name: Test OpCache
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
      - name: Upload Test Coverage to Codecov.io
        if: always()
        run: bash <(curl -s https://codecov.io/bash)
      - name: Notify Slack
        if: failure()
        uses: ./.github/actions/notify-slack
        with:
          token: ${{ secrets.ACTION_MONITORING_SLACK }}
  COMMUNITY:
    needs: GENERATE_MATRIX
    if: ${{ needs.GENERATE_MATRIX.outputs.branches != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.GENERATE_MATRIX.outputs.branches) }}
    name: "${{ matrix.branch.name }}_COMMUNITY"
    runs-on: ubuntu-20.04
    env:
      UBSAN_OPTIONS: print_stacktrace=1
      USE_ZEND_ALLOC: 0
      USE_TRACKED_ALLOC: 1
    steps:
      - name: git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch.ref }}
      - name: apt
        uses: ./.github/actions/apt-x64
      - name: ./configure
        uses: ./.github/actions/configure-x64
        with:
          configurationParameters: >-
            --enable-debug
            --enable-zts
            CFLAGS='-fsanitize=undefined,address -fno-sanitize-recover -DZEND_TRACK_ARENA_ALLOC'
            LDFLAGS='-fsanitize=undefined,address'
      - name: make
        run: make -j$(/usr/bin/nproc) >/dev/null
      - name: make install
        uses: ./.github/actions/install-linux
      - name: Setup
        run: |
          sudo service mysql start
          mysql -uroot -proot -e "CREATE DATABASE IF NOT EXISTS test"
          mysql -uroot -proot -e "SET GLOBAL local_infile = true"
      - name: Enable Opcache and JIT
        run: |
          echo zend_extension=opcache.so > /etc/php.d/opcache.ini
          echo opcache.enable=1 >> /etc/php.d/opcache.ini
          echo opcache.enable_cli=1 >> /etc/php.d/opcache.ini
          echo opcache.protect_memory=1 >> /etc/php.d/opcache.ini
          echo opcache.jit=tracing >> /etc/php.d/opcache.ini
          echo opcache.jit_buffer_size=1G >> /etc/php.d/opcache.ini
          echo opcache.jit_max_root_traces=100000 >> /etc/php.d/opcache.ini
          echo opcache.jit_max_side_traces=100000 >> /etc/php.d/opcache.ini
          echo opcache.jit_max_exit_counters=100000 >> /etc/php.d/opcache.ini
          echo opcache.jit_hot_loop=1 >> /etc/php.d/opcache.ini
          echo opcache.jit_hot_func=1 >> /etc/php.d/opcache.ini
          echo opcache.jit_hot_return=1 >> /etc/php.d/opcache.ini
          echo opcache.jit_hot_side_exit=1 >> /etc/php.d/opcache.ini
          echo opcache.file_update_protection=0 >> /etc/php.d/opcache.ini
          echo opcache.memory_consumption=256M >> /etc/php.d/opcache.ini
          echo opcache.interned_strings_buffer=64 >> /etc/php.d/opcache.ini
          echo opcache.max_accelerated_files=100000 >> /etc/php.d/opcache.ini
          echo memory_limit=-1 >> /etc/php.d/opcache.ini
          php -v

      - name: Test multiple libraries and frameworks in parallel
        if: matrix.branch.ref != 'PHP-8.0'
        run: |
          sudo prlimit --pid $$ --nofile=1048576:1048576
          
          php $GITHUB_WORKSPACE/.github/nightly.php || exit $?

      - name: Test PHPSeclib
        if: always()
        run: |
          git clone https://github.com/phpseclib/phpseclib --branch=master
          cd phpseclib
          git checkout 259bd9f1e8af11726ed74acf527c2c046549061b
          export ASAN_OPTIONS=exitcode=139
          export PHPSECLIB_ALLOW_JIT=1
          php /usr/bin/composer install --no-progress --ignore-platform-reqs
          php $GITHUB_WORKSPACE/.github/jit_check.php vendor/bin/paratest --verbose --configuration=tests/phpunit.xml --runner=WrapperRunner || exit $?

      - name: Test Psalm
        run: |
          git clone https://github.com/vimeo/psalm --depth 1
          cd psalm
          git rev-parse HEAD
          export ASAN_OPTIONS=exitcode=139
          # Needed to avoid overwriting JIT config
          export PSALM_ALLOW_XDEBUG=1
          php /usr/bin/composer install --no-progress --ignore-platform-reqs
          php $GITHUB_WORKSPACE/.github/jit_check.php ./psalm --no-cache || exit $?

      - name: Test PHPStan
        if: matrix.branch.ref != 'PHP-8.2'
        run: |
          git clone https://github.com/phpstan/phpstan-src --depth 1
          cd phpstan-src
          git rev-parse HEAD
          sed -E 's/phpVersion(.*)max[^)]+/phpVersion\1max(89999/g' conf/parametersSchema.neon -i
          php /usr/bin/composer install --no-progress --ignore-platform-reqs
          sed -i 's/public const IS/public const int IS/g' vendor/ondrejmirtes/better-reflection/src/Reflection/Adapter/*php
          export ASAN_OPTIONS=exitcode=139
          php $GITHUB_WORKSPACE/.github/jit_check.php bin/phpstan clear-result-cache
          php $GITHUB_WORKSPACE/.github/jit_check.php bin/phpstan || exit $?
          
      - name: 'Symfony Preloading'
        if: matrix.branch.ref != 'PHP-8.0'
        run: |
          php /usr/bin/composer create-project symfony/symfony-demo symfony_demo --no-progress --ignore-platform-reqs
          cd symfony_demo
          git rev-parse HEAD
          sed -i 's/PHP_SAPI/"cli-server"/g' var/cache/dev/App_KernelDevDebugContainer.preload.php
          php -d opcache.preload=var/cache/dev/App_KernelDevDebugContainer.preload.php public/index.php

      - name: Notify Slack
        if: failure()
        uses: ./.github/actions/notify-slack
        with:
          token: ${{ secrets.ACTION_MONITORING_SLACK }}
  OPCACHE_VARIATION:
    needs: GENERATE_MATRIX
    if: ${{ needs.GENERATE_MATRIX.outputs.branches != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.GENERATE_MATRIX.outputs.branches) }}
    name: "${{ matrix.branch.name }}_OPCACHE_VARIATION"
    runs-on: ubuntu-20.04
    steps:
      - name: git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch.ref }}
      - name: Create MSSQL container
        uses: ./.github/actions/setup-mssql
      - name: Create Oracle container
        uses: ./.github/actions/setup-oracle
      - name: apt
        uses: ./.github/actions/apt-x64
      - name: ./configure
        uses: ./.github/actions/configure-x64
        with:
          configurationParameters: >-
            --enable-debug --disable-zts
      - name: make
        run: make -j$(/usr/bin/nproc) >/dev/null
      - name: make install
        uses: ./.github/actions/install-linux
      - name: Setup
        uses: ./.github/actions/setup-x64
      - name: Test File Cache (prime shm)
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            --file-cache-prime
      - name: Test File Cache (prime shm, use shm)
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            --file-cache-use
      - name: Test File Cache (prime shm, use file)
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            --file-cache-use
            -d opcache.file_cache_only=1
      - name: Test File Cache Only (prime)
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            --file-cache-prime
            -d opcache.file_cache_only=1
      - name: Test File Cache Only (use)
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
            --file-cache-use
            -d opcache.file_cache_only=1
      - name: Verify generated files are up to date
        uses: ./.github/actions/verify-generated-files
      - name: Notify Slack
        if: failure()
        uses: ./.github/actions/notify-slack
        with:
          token: ${{ secrets.ACTION_MONITORING_SLACK }}
  MSAN:
    needs: GENERATE_MATRIX
    if: ${{ needs.GENERATE_MATRIX.outputs.branches != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.GENERATE_MATRIX.outputs.branches) }}
    name: "${{ matrix.branch.name }}_MSAN"
    runs-on: ubuntu-22.04
    steps:
      - name: git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch.ref }}
      - name: apt
        uses: ./.github/actions/apt-x64
      - name: ./configure
        run: |
          export CC=clang
          export CXX=clang++
          export CFLAGS="-DZEND_TRACK_ARENA_ALLOC"
          ./buildconf --force
          # msan requires all used libraries to be instrumented,
          # so we should avoiding linking against anything but libc here
          ./configure \
            --enable-debug \
            --enable-zts \
            --enable-option-checking=fatal \
            --prefix=/usr \
            --without-sqlite3 \
            --without-pdo-sqlite \
            --without-libxml \
            --disable-dom \
            --disable-simplexml \
            --disable-xml \
            --disable-xmlreader \
            --disable-xmlwriter \
            --without-pcre-jit \
            --disable-opcache-jit \
            --enable-phpdbg \
            --enable-fpm \
            --with-pdo-mysql=mysqlnd \
            --with-mysqli=mysqlnd \
            --disable-mysqlnd-compression-support \
            --without-pear \
            --enable-exif \
            --enable-sysvsem \
            --enable-sysvshm \
            --enable-shmop \
            --enable-pcntl \
            --enable-mbstring \
            --disable-mbregex \
            --enable-sockets \
            --enable-bcmath \
            --enable-calendar \
            --enable-ftp \
            --enable-zend-test \
            --enable-werror \
            --enable-memory-sanitizer \
            --with-config-file-path=/etc \
            --with-config-file-scan-dir=/etc/php.d
      - name: make
        run: make -j$(/usr/bin/nproc) >/dev/null
      - name: make install
        run: |
          sudo make install
          sudo mkdir -p /etc/php.d
          sudo chmod 777 /etc/php.d
          echo mysqli.default_socket=/var/run/mysqld/mysqld.sock    > /etc/php.d/mysqli.ini
          echo pdo_mysql.default_socket=/var/run/mysqld/mysqld.sock > /etc/php.d/pdo_mysql.ini
      - name: Setup
        run: |
          set -x
          sudo service mysql start
          mysql -uroot -proot -e "CREATE DATABASE IF NOT EXISTS test"
          # Ensure local_infile tests can run.
          mysql -uroot -proot -e "SET GLOBAL local_infile = true"
          sudo locale-gen de_DE
      - name: Test
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            --msan
      - name: Test Opcache
        uses: ./.github/actions/test-linux
        with:
          runTestsParameters: >-
            --msan
            -d zend_extension=opcache.so
            -d opcache.enable_cli=1
      - name: Verify generated files are up to date
        uses: ./.github/actions/verify-generated-files
      - name: Notify Slack
        if: failure()
        uses: ./.github/actions/notify-slack
        with:
          token: ${{ secrets.ACTION_MONITORING_SLACK }}
  LIBMYSQLCLIENT:
    needs: GENERATE_MATRIX
    if: ${{ needs.GENERATE_MATRIX.outputs.branches != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        branch: ${{ fromJson(needs.GENERATE_MATRIX.outputs.branches) }}
        exclude:
          - branch: { name: 'PHP-80', ref: 'PHP-8.0' }
    name: "${{ matrix.branch.name }}_LIBMYSQLCLIENT"
    runs-on: ubuntu-20.04
    steps:
      - name: git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch.ref }}
      - name: apt
        run: |
          sudo apt-get update -y | true
          sudo apt install bison re2c
      - name: Setup
        run: |
          sudo service mysql start
          mysql -uroot -proot -e "CREATE DATABASE IF NOT EXISTS test"
          # Ensure local_infile tests can run.
          mysql -uroot -proot -e "SET GLOBAL local_infile = true"
      # Does not support caching_sha2_auth :(
      # - name: Build mysql-5.6
      #  uses: ./.github/actions/build-libmysqlclient
      #  with:
      #    libmysql: mysql-5.6.49-linux-glibc2.12-x86_64.tar.gz
      # - name: Test mysql-5.6
      #   uses: ./.github/actions/test-libmysqlclient
      - name: Build mysql-5.7
        uses: ./.github/actions/build-libmysqlclient
        with:
          libmysql: mysql-5.7.44-linux-glibc2.12-x86_64.tar.gz
          withMysqli: ${{ matrix.branch.ref == 'PHP-8.1' }}
      - name: Test mysql-5.7
        uses: ./.github/actions/test-libmysqlclient
        with:
          withMysqli: ${{ matrix.branch.ref == 'PHP-8.1' }}
      - name: Build mysql-8.0
        uses: ./.github/actions/build-libmysqlclient
        with:
          # FIXME: There are new warnings
          # configurationParameters: --enable-werror
          libmysql: mysql-8.0.33-linux-glibc2.12-x86_64.tar.xz
          withMysqli: ${{ matrix.branch.ref == 'PHP-8.1' }}
      - name: Test mysql-8.0
        uses: ./.github/actions/test-libmysqlclient
        with:
          withMysqli: ${{ matrix.branch.ref == 'PHP-8.1' }}
      - name: Verify generated files are up to date
        uses: ./.github/actions/verify-generated-files
      - name: Notify Slack
        if: failure()
        uses: ./.github/actions/notify-slack
        with:
          token: ${{ secrets.ACTION_MONITORING_SLACK }}
  WINDOWS:
    needs: GENERATE_MATRIX
    if: ${{ needs.GENERATE_MATRIX.outputs.branches != '[]' }}
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.GENERATE_MATRIX.outputs.windows-matrix-include) }}
    name: "${{ matrix.branch.name }}_WINDOWS_${{ matrix.x64 && 'X64' || 'X86' }}_${{ matrix.zts && 'ZTS' || 'NTS' }}"
    runs-on: windows-2019
    env:
      PHP_BUILD_CACHE_BASE_DIR: C:\build-cache
      PHP_BUILD_OBJ_DIR: C:\obj
      PHP_BUILD_CACHE_SDK_DIR: C:\build-cache\sdk
      PHP_BUILD_SDK_BRANCH: php-sdk-2.2.0
      PHP_BUILD_CRT: vs16
      PLATFORM: ${{ matrix.x64 && 'x64' || 'x86' }}
      THREAD_SAFE: "${{ matrix.zts && '1' || '0' }}"
      INTRINSICS: "${{ matrix.zts && 'AVX2' || '' }}"
      PARALLEL: -j2
      OPCACHE: "${{ matrix.opcache && '1' || '0' }}"
    steps:
      - name: git config
        run: git config --global core.autocrlf false && git config --global core.eol lf
      - name: git checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch.ref }}
      - name: Setup
        uses: ./.github/actions/setup-windows
      - name: Build
        run: .github/scripts/windows/build.bat
      - name: Test
        run: .github/scripts/windows/test.bat
